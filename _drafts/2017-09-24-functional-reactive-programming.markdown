---
layout: post
title: Functional Reactive Programming
---
<div class="kg-card-markdown"><p>A few months ago I was looking into what smarter people in the world were doing around the question of user interfaces in pure functional settings, when I was first introduced to the concept of <em>Functional Reactive Programming</em>, or FRP. FRP is a pattern that uses the concept of time as an input to enable event-type user interactions in a purely functional way.</p>
<p>The &quot;reactive&quot; part is not hard to grasp; it refers to a program being closely attuned to inputs, usually from a user via a graphical user interface. Think about a spreadsheet. We can put a formula in cell B1 that references cell A1. Whenever cell A1 is updated, B1 is updated right along with it. We don't need to click a button to recalculate; it just <em>reacts</em>.</p>
<p>In the last few years we have seen a lot of action in the reactive space with the use of data binding, particularly with the Model-View-ViewModel pattern, which has played a huge part in the success of XAML, Knockout, Angular, and plenty of other frameworks (add links and other examples). In imperative object-oriented settings, this has been implemented using the Observer pattern. Visual UI elements are bound to observable properties of a view model object. When either a UI element or its bound property changes, the other side of its binding changes right along with it. You might call it reactive.</p>
<p>I have enjoyed some good productivity with this pattern, as I try to reimagine how to approach common coding tasks in a functional way, I slam into the realization that this pattern is entirely dependent on mutation. All it does is watch for changes in state in order to trigger other changes in state. How could we possibly solve this problem without mutable state?</p>
<p>Let's take a minute to look at mutable state in the real world. Take one piece of information in the world like the date of my birth. It can never change. I was born when I was born, and that's all. But what about my age? It changes every year; isn't that mutation? It appears that way, but let's look at it differently. My age is not changing randomly or sporadically; it is perfectly predictable. Why is this? It's because my age is not really an attribute of me at all; it is a function of my birth date and the passage of time. See what we did there? Age is not a value; it is a function with time as an input.</p>
<p>Time as an input is the key concept of FRP. A function that takes time as an input can follow the real world through all of its successive states and yet still maintain its purity, because the same input will result in the same output. Such a function can also be seen as a time-varying value. In the Haskell world these time-varying values are known as Behaviors; in Elm they're called Signals.</p>
<p>Whenever in the life of a signal some value-affecting event takes place, such as the anniversary of my birth, the signal &quot;fires&quot; with its new value causing every other signal that depends on it for input, to reevaluate themselves and fire as well, and on up the dependency chain.</p>
</div>
